{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandra\\\\OneDrive\\\\Desktop\\\\CTO\\\\cto\\\\src\\\\components\\\\CTOData.js\",\n  _s = $RefreshSig$();\n// CTOData.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport API_URL from './constants'; // Import the API_URL constant\nimport './CTOData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CTOData = () => {\n  _s();\n  const [ctoData, setCTOData] = useState([]);\n  const [editedData, setEditedData] = useState({});\n  useEffect(() => {\n    // Fetch CTO data from the backend when the component mounts\n    axios.post(`${API_URL}/track`, {/* Add any required parameters */}).then(response => setCTOData(response.data)).catch(error => console.error('Error fetching CTO data', error));\n  }, []);\n  const handleEdit = (field, value, index) => {\n    // Update the editedData state when a field is edited\n    setEditedData({\n      ...editedData,\n      [index]: {\n        ...editedData[index],\n        [field]: value\n      }\n    });\n  };\n  const handleSave = () => {\n    // Send the edited data to the backend to update the database\n    axios.post('http://localhost:5000/update', editedData).then(response => {\n      console.log('Update successful:', response.data);\n      // Optionally, update the local state or show a success message\n    }).catch(error => console.error('Error updating data', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"CTO Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: ctoData.map((row, index) => {\n          var _editedData$index;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.field1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.field2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: ((_editedData$index = editedData[index]) === null || _editedData$index === void 0 ? void 0 : _editedData$index.field1) || row.field1,\n                onChange: e => handleEdit('field1', e.target.value, index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(CTOData, \"wW3L4r7YDGamSQMOsMxv/xPFwrk=\");\n_c = CTOData;\nexport default CTOData;\nvar _c;\n$RefreshReg$(_c, \"CTOData\");","map":{"version":3,"names":["React","useState","useEffect","axios","API_URL","jsxDEV","_jsxDEV","CTOData","_s","ctoData","setCTOData","editedData","setEditedData","post","then","response","data","catch","error","console","handleEdit","field","value","index","handleSave","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","_editedData$index","field1","field2","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Chandra/OneDrive/Desktop/CTO/cto/src/components/CTOData.js"],"sourcesContent":["// CTOData.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport API_URL from './constants';  // Import the API_URL constant\r\nimport './CTOData.css';\r\n\r\nconst CTOData = () => {\r\n  const [ctoData, setCTOData] = useState([]);\r\n  const [editedData, setEditedData] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch CTO data from the backend when the component mounts\r\n    axios.post(`${API_URL}/track`, { /* Add any required parameters */ })\r\n      .then(response => setCTOData(response.data))\r\n      .catch(error => console.error('Error fetching CTO data', error));\r\n  }, []);\r\n\r\n  const handleEdit = (field, value, index) => {\r\n    // Update the editedData state when a field is edited\r\n    setEditedData({\r\n      ...editedData,\r\n      [index]: {\r\n        ...editedData[index],\r\n        [field]: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    // Send the edited data to the backend to update the database\r\n    axios.post('http://localhost:5000/update', editedData)\r\n      .then(response => {\r\n        console.log('Update successful:', response.data);\r\n        // Optionally, update the local state or show a success message\r\n      })\r\n      .catch(error => console.error('Error updating data', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>CTO Data</h2>\r\n      <table>\r\n        <thead>\r\n          {/* Add table headers based on your CTO data structure */}\r\n        </thead>\r\n        <tbody>\r\n          {ctoData.map((row, index) => (\r\n            <tr key={index}>\r\n              {/* Display each field in a table cell */}\r\n              <td>{row.field1}</td>\r\n              <td>{row.field2}</td>\r\n              {/* Add more cells for other fields */}\r\n              <td>\r\n                {/* Editable input for a specific field */}\r\n                <input\r\n                  type=\"text\"\r\n                  value={editedData[index]?.field1 || row.field1}\r\n                  onChange={(e) => handleEdit('field1', e.target.value, index)}\r\n                />\r\n              </td>\r\n              {/* Add more cells for other editable fields */}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button onClick={handleSave}>Save Changes</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CTOData;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,aAAa,CAAC,CAAE;AACpC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CAACU,IAAI,CAAE,GAAET,OAAQ,QAAO,EAAE,CAAE,kCAAmC,CAAC,CAClEU,IAAI,CAACC,QAAQ,IAAIL,UAAU,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC3CC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,UAAU,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC1C;IACAX,aAAa,CAAC;MACZ,GAAGD,UAAU;MACb,CAACY,KAAK,GAAG;QACP,GAAGZ,UAAU,CAACY,KAAK,CAAC;QACpB,CAACF,KAAK,GAAGC;MACX;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB;IACArB,KAAK,CAACU,IAAI,CAAC,8BAA8B,EAAEF,UAAU,CAAC,CACnDG,IAAI,CAACC,QAAQ,IAAI;MAChBI,OAAO,CAACM,GAAG,CAAC,oBAAoB,EAAEV,QAAQ,CAACC,IAAI,CAAC;MAChD;IACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAChE,CAAC;EAED,oBACEZ,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEO,CAAC,eACRxB,OAAA;QAAAoB,QAAA,EACGjB,OAAO,CAACsB,GAAG,CAAC,CAACC,GAAG,EAAET,KAAK;UAAA,IAAAU,iBAAA;UAAA,oBACtB3B,OAAA;YAAAoB,QAAA,gBAEEpB,OAAA;cAAAoB,QAAA,EAAKM,GAAG,CAACE;YAAM;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrBxB,OAAA;cAAAoB,QAAA,EAAKM,GAAG,CAACG;YAAM;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAErBxB,OAAA;cAAAoB,QAAA,eAEEpB,OAAA;gBACE8B,IAAI,EAAC,MAAM;gBACXd,KAAK,EAAE,EAAAW,iBAAA,GAAAtB,UAAU,CAACY,KAAK,CAAC,cAAAU,iBAAA,uBAAjBA,iBAAA,CAAmBC,MAAM,KAAIF,GAAG,CAACE,MAAO;gBAC/CG,QAAQ,EAAGC,CAAC,IAAKlB,UAAU,CAAC,QAAQ,EAAEkB,CAAC,CAACC,MAAM,CAACjB,KAAK,EAAEC,KAAK;cAAE;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9D;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC;UAAA,GAZEP,KAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcV,CAAC;QAAA,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACRxB,OAAA;MAAQkC,OAAO,EAAEhB,UAAW;MAAAE,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACtB,EAAA,CA9DID,OAAO;AAAAkC,EAAA,GAAPlC,OAAO;AAgEb,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}